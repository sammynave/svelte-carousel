function noop() {}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function assignTrue(tar, src) {
	for (var k in src) tar[k] = 1;
	return tar;
}

function callAfter(fn, i) {
	if (i === 0) fn();
	return () => {
		if (!--i) fn();
	};
}

function addLoc(element, file, line, column, char) {
	element.__svelte_meta = {
		loc: { file, line, column, char }
	};
}

function run(fn) {
	fn();
}

function append(target, node) {
	target.appendChild(node);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations, detach) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detach);
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function setData(text, data) {
	text.data = '' + data;
}

function setStyle(node, key, value) {
	node.style.setProperty(key, value);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function destroyDev(detach) {
	destroy.call(this, detach);
	this.destroy = function() {
		console.warn('Component was already destroyed');
	};
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function get() {
	return this._state;
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function setDev(newState) {
	if (typeof newState !== 'object') {
		throw new Error(
			this._debugName + '.set was called without an object of data key-values to update.'
		);
	}

	this._checkReadOnly(newState);
	set.call(this, newState);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

var protoDev = {
	destroy: destroyDev,
	get,
	fire,
	on,
	set: setDev,
	_recompute: noop,
	_set,
	_stage,
	_mount,
	_differs
};

/* src/components/Slide.html generated by Svelte v2.13.2 */

function left({ position }) {
	return `${position * 100}%`;
}

function oncreate() {
  const { slide } = this.get();
  this.refs.slide.appendChild(slide);
}
const file = "src/components/Slide.html";

function create_main_fragment(component, ctx) {
	var div, current;

	return {
		c: function create() {
			div = createElement("div");
			setStyle(div, "left", ctx.left);
			div.className = "svelte-jy0zwf svelte-ref-slide";
			addLoc(div, file, 0, 0, 0);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			component.refs.slide = div;
			current = true;
		},

		p: function update(changed, ctx) {
			if (changed.left) {
				setStyle(div, "left", ctx.left);
			}
		},

		i: function intro(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: run,

		d: function destroy$$1(detach) {
			if (detach) {
				detachNode(div);
			}

			if (component.refs.slide === div) component.refs.slide = null;
		}
	};
}

function Slide(options) {
	this._debugName = '<Slide>';
	if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
	init(this, options);
	this.refs = {};
	this._state = assign({}, options.data);
	this._recompute({ position: 1 }, this._state);
	if (!('position' in this._state)) console.warn("<Slide> was created without expected data property 'position'");
	this._intro = !!options.intro;

	this._fragment = create_main_fragment(this, this._state);

	this.root._oncreate.push(() => {
		oncreate.call(this);
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}

	this._intro = true;
}

assign(Slide.prototype, protoDev);

Slide.prototype._checkReadOnly = function _checkReadOnly(newState) {
	if ('left' in newState && !this._updatingReadonlyProperty) throw new Error("<Slide>: Cannot set read-only property 'left'");
};

Slide.prototype._recompute = function _recompute(changed, state) {
	if (changed.position) {
		if (this._differs(state.left, (state.left = left(state)))) changed.left = true;
	}
};

/* src/components/Carousel.html generated by Svelte v2.13.2 */

function translate({ current }) {
	return `${-(current * 100)}%`;
}

function slideWidth({ total }) {
	return 100 / total;
}

function width({ total }) {
	return `${100 * total}%`;
}

function minHeight({ slides, current }) {
	return `${slides[current].getBoundingClientRect().height}px`;
}

function data() {
  return {
    current: 0
  }
}
function oncreate$1() {
  const { slides } = this.get();
  this.set({ total: slides.length });
}
const file$1 = "src/components/Carousel.html";

function create_main_fragment$1(component, ctx) {
	var div, div_1, div_2, text_3, button, text_4, text_5, button_1, text_6, text_7, text_8, current;

	var each_value = ctx.slides;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
	}

	function outroBlock(i, detach, fn) {
		if (each_blocks[i]) {
			each_blocks[i].o(() => {
				if (detach) {
					each_blocks[i].d(detach);
					each_blocks[i] = null;
				}
				if (fn) fn();
			});
		}
	}

	function click_handler(event) {
		component.set({ current: ctx.current - 1});
	}

	function click_handler_1(event) {
		component.set({ current: ctx.current + 1});
	}

	return {
		c: function create() {
			div = createElement("div");
			div_1 = createElement("div");
			div_2 = createElement("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_3 = createText("\n\n");
			button = createElement("button");
			text_4 = createText("last");
			text_5 = createText("\n");
			button_1 = createElement("button");
			text_6 = createText("next");
			text_7 = createText("\n\n");
			text_8 = createText(ctx.current);
			setStyle(div_2, "width", ctx.width);
			addLoc(div_2, file$1, 2, 4, 133);
			div_1.className = "slider svelte-1laoxch";
			setStyle(div_1, "transform", "translateX(" + ctx.translate + ")");
			addLoc(div_1, file$1, 1, 2, 64);
			div.className = "slider-viewport svelte-1laoxch";
			setStyle(div, "min-height", ctx.minHeight);
			addLoc(div, file$1, 0, 0, 0);
			addListener(button, "click", click_handler);
			addLoc(button, file$1, 10, 0, 295);
			addListener(button_1, "click", click_handler_1);
			addLoc(button_1, file$1, 11, 0, 357);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, div_1);
			append(div_1, div_2);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].i(div_2, null);
			}

			insert(target, text_3, anchor);
			insert(target, button, anchor);
			append(button, text_4);
			insert(target, text_5, anchor);
			insert(target, button_1, anchor);
			append(button_1, text_6);
			insert(target, text_7, anchor);
			insert(target, text_8, anchor);
			current = true;
		},

		p: function update(changed, _ctx) {
			ctx = _ctx;
			if (changed.slides || changed.slideWidth) {
				each_value = ctx.slides;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(component, child_ctx);
						each_blocks[i].c();
					}
					each_blocks[i].i(div_2, null);
				}
				for (; i < each_blocks.length; i += 1) outroBlock(i, 1);
			}

			if (!current || changed.width) {
				setStyle(div_2, "width", ctx.width);
			}

			if (!current || changed.translate) {
				setStyle(div_1, "transform", "translateX(" + ctx.translate + ")");
			}

			if (!current || changed.minHeight) {
				setStyle(div, "min-height", ctx.minHeight);
			}

			if (!current || changed.current) {
				setData(text_8, ctx.current);
			}
		},

		i: function intro(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: function outro(outrocallback) {
			if (!current) return;

			each_blocks = each_blocks.filter(Boolean);
			const countdown = callAfter(outrocallback, each_blocks.length);
			for (let i = 0; i < each_blocks.length; i += 1) outroBlock(i, 0, countdown);

			current = false;
		},

		d: function destroy$$1(detach) {
			if (detach) {
				detachNode(div);
			}

			destroyEach(each_blocks, detach);

			if (detach) {
				detachNode(text_3);
				detachNode(button);
			}

			removeListener(button, "click", click_handler);
			if (detach) {
				detachNode(text_5);
				detachNode(button_1);
			}

			removeListener(button_1, "click", click_handler_1);
			if (detach) {
				detachNode(text_7);
				detachNode(text_8);
			}
		}
	};
}

// (4:6) {#each slides as slide, i}
function create_each_block(component, ctx) {
	var current;

	var slide_initial_data = {
	 	slide: ctx.slide,
	 	width: ctx.slideWidth,
	 	position: ctx.i
	 };
	var slide = new Slide({
		root: component.root,
		store: component.store,
		data: slide_initial_data
	});

	return {
		c: function create() {
			slide._fragment.c();
		},

		m: function mount(target, anchor) {
			slide._mount(target, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			var slide_changes = {};
			if (changed.slides) slide_changes.slide = ctx.slide;
			if (changed.slideWidth) slide_changes.width = ctx.slideWidth;
			slide._set(slide_changes);
		},

		i: function intro(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: function outro(outrocallback) {
			if (!current) return;

			if (slide) slide._fragment.o(outrocallback);
			current = false;
		},

		d: function destroy$$1(detach) {
			slide.destroy(detach);
		}
	};
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.slide = list[i];
	child_ctx.each_value = list;
	child_ctx.i = i;
	return child_ctx;
}

function Carousel(options) {
	this._debugName = '<Carousel>';
	if (!options || (!options.target && !options.root)) throw new Error("'target' is a required option");
	init(this, options);
	this._state = assign(data(), options.data);
	this._recompute({ current: 1, total: 1, slides: 1 }, this._state);
	if (!('current' in this._state)) console.warn("<Carousel> was created without expected data property 'current'");
	if (!('total' in this._state)) console.warn("<Carousel> was created without expected data property 'total'");
	if (!('slides' in this._state)) console.warn("<Carousel> was created without expected data property 'slides'");
	this._intro = !!options.intro;

	this._fragment = create_main_fragment$1(this, this._state);

	this.root._oncreate.push(() => {
		oncreate$1.call(this);
		this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
	});

	if (options.target) {
		if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}

	this._intro = true;
}

assign(Carousel.prototype, protoDev);

Carousel.prototype._checkReadOnly = function _checkReadOnly(newState) {
	if ('translate' in newState && !this._updatingReadonlyProperty) throw new Error("<Carousel>: Cannot set read-only property 'translate'");
	if ('slideWidth' in newState && !this._updatingReadonlyProperty) throw new Error("<Carousel>: Cannot set read-only property 'slideWidth'");
	if ('width' in newState && !this._updatingReadonlyProperty) throw new Error("<Carousel>: Cannot set read-only property 'width'");
	if ('minHeight' in newState && !this._updatingReadonlyProperty) throw new Error("<Carousel>: Cannot set read-only property 'minHeight'");
};

Carousel.prototype._recompute = function _recompute(changed, state) {
	if (changed.current) {
		if (this._differs(state.translate, (state.translate = translate(state)))) changed.translate = true;
	}

	if (changed.total) {
		if (this._differs(state.slideWidth, (state.slideWidth = slideWidth(state)))) changed.slideWidth = true;
		if (this._differs(state.width, (state.width = width(state)))) changed.width = true;
	}

	if (changed.slides || changed.current) {
		if (this._differs(state.minHeight, (state.minHeight = minHeight(state)))) changed.minHeight = true;
	}
};

export { Carousel, Slide };
//# sourceMappingURL=index.js.map
